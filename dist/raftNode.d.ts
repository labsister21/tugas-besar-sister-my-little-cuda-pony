import { EventEmitter } from 'events';
import { NodeInfo, LogEntry, Command, VoteRequest, VoteResponse, AppendEntriesRequest, AppendEntriesResponse, NodeState } from './types';
export declare class RaftNode extends EventEmitter {
    private nodeInfo;
    private clusterNodes;
    private currentTerm;
    private votedFor;
    private logEntries;
    private commitIndex;
    private lastApplied;
    private state;
    private leaderId;
    private electionTimeout;
    private heartbeatInterval;
    private nextIndex;
    private matchIndex;
    private keyValueStore;
    private votes;
    private static readonly HEARTBEAT_INTERVAL;
    private static readonly MIN_ELECTION_TIMEOUT;
    private static readonly MAX_ELECTION_TIMEOUT;
    constructor(nodeInfo: NodeInfo, clusterNodes: NodeInfo[]);
    private log;
    private resetElectionTimeout;
    private startElection;
    private requestVote;
    private becomeLeader;
    private startHeartbeat;
    private sendHeartbeats;
    private sendAppendEntries;
    private updateCommitIndex;
    private applyCommittedEntries;
    private applyCommand;
    private applyAddNode;
    private applyRemoveNode;
    addNodeConsensus(nodeInfo: NodeInfo): Promise<any>;
    removeNodeConsensus(nodeId: string): Promise<any>;
    handleVoteRequest(request: VoteRequest): VoteResponse;
    handleAppendEntries(request: AppendEntriesRequest): AppendEntriesResponse;
    executeCommand(command: Command): Promise<any>;
    private executeReadCommand;
    private confirmLeadership;
    private sendHeartbeatToNode;
    private waitForCommitment;
    getState(): NodeState;
    getLeaderInfo(): NodeInfo | null;
    getLog(): LogEntry[];
    addNode(nodeInfo: NodeInfo): void;
    removeNode(nodeId: string): void;
    shutdown(): void;
}
//# sourceMappingURL=raftNode.d.ts.map